<?php

namespace Proxies\__CG__\Acme\CallendarBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Dates extends \Acme\CallendarBundle\Entity\Dates implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getExploded()
    {
        $this->__load();
        return parent::getExploded();
    }

    public function getNiceEvent()
    {
        $this->__load();
        return parent::getNiceEvent();
    }

    public function trimAndConvert()
    {
        $this->__load();
        return parent::trimAndConvert();
    }

    public function setId($in)
    {
        $this->__load();
        return parent::setId($in);
    }

    public function setDate($in)
    {
        $this->__load();
        return parent::setDate($in);
    }

    public function setEvent($in)
    {
        $this->__load();
        return parent::setEvent($in);
    }

    public function setUser_id($in)
    {
        $this->__load();
        return parent::setUser_id($in);
    }

    public function setUserId($in)
    {
        $this->__load();
        return parent::setUserId($in);
    }

    public function setUser($in)
    {
        $this->__load();
        return parent::setUser($in);
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function getDate()
    {
        $this->__load();
        return parent::getDate();
    }

    public function getEvent()
    {
        $this->__load();
        return parent::getEvent();
    }

    public function getUserId()
    {
        $this->__load();
        return parent::getUserId();
    }

    public function getUser_id()
    {
        $this->__load();
        return parent::getUser_id();
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'date', 'event', 'user_id', 'user');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}